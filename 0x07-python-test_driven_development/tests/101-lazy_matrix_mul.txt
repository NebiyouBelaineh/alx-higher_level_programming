The ``101-lazy_matrix_mul`` module
======================

Using ``matrix_mul``
-------------------

First import ``lazy_matrix_mul`` from the ``101-lazy_matrix_mul`` module and save to matrix_mul:

    >>> matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Now use it:

    >>> print(matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
    [[ 7 10]
     [15 22]]
    >>> print(matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
    [[13 16]]

#################################################################

Test for m_a not list with a string

    >>> print(matrix_mul("hello", [[1, 2], [3, 4]])) # Test for m_a not list with a string
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead
     
Test for m_b not list with a string

    >>> print(matrix_mul([[1, 2], [3, 4]], "world")) # Test for m_b not list with a string
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

Test for m_a not list with a number
    
    >>> print(matrix_mul(1, [[1, 2], [3, 4]])) # Test for m_a not list with a number
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

Test for m_b not list with a number

    >>> print(matrix_mul([[1, 2], [3, 4]], 1)) # Test for m_b not list with a number
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

Test for m_a not list of lists with a number

    >>> print(matrix_mul([1,2], [[3, 4], [5, 6]])) # Test for m_a not list of lists with a number
    [13 16]

Test for m_b not list of lists with a number

    >>> print(matrix_mul([[3, 4], [5, 6]], [1,2])) # Test for m_b not list of lists with a number
    [11 17]

Test for m_a as a list with a string

    >>> print(matrix_mul(["ALXSE is Awesome"], [1,2])) # Test for m_b not list of lists with a string
    Traceback (most recent call last):
    ValueError: shapes (1,) and (2,) not aligned: 1 (dim 0) != 2 (dim 0)

Test for m_b as a list with a string

    >>> print(matrix_mul([[3, 4], [5, 6]],["ALXSE is Awesome"])) # Test for m_b not list of lists with a string
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (1,) not aligned: 2 (dim 1) != 1 (dim 0)

Test for m_a with list but empty: []

    >>> matrix_mul([], [[3, 4], [5, 6]]) # Test for m_a with list but empty: [] or [[]]
    Traceback (most recent call last):
    ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

Test for m_a with list but empty: [[]]

    >>> matrix_mul([[]], [[3, 4], [5, 6]]) # Test for m_a with list but empty: [] or [[]]
    Traceback (most recent call last):
        ...
    ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

----> Test for if one element of those list of lists is not an integer or a float
    

Test for if m_a has non integer or floats
    >>> matrix_mul([[1, '2'], [3, 4]], [[1, 2], [3, 4]]) # Test for if m_a has non integer or floats
    Traceback (most recent call last):
        ...
    TypeError: invalid data type for einsum
    
Test for if m_b has non integer or floats

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], ["Three", 4]]) # Test for if m_b has non integer or floats
    Traceback (most recent call last):
        ...
    TypeError: invalid data type for einsum


Test for Rectangle

    >>> matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]]) # Test for Rectangle m_a
    Traceback (most recent call last):
        ...
    TypeError: Object arrays are not currently supported

Test for Rectangle

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]]) # Test for Rectangle m_b
    Traceback (most recent call last):
        ...
    TypeError: Object arrays are not currently supported

Test for longer rows and columns

    >>> matrix_mul([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], [[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) # Test for longer rows and columns
    array([[ 70,  80,  90],
           [158, 184, 210],
           [246, 288, 330]])

Test for Multiplication: column of m_a != row of m_b

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4], [5, 6]]) # Test for Rectangle m_b
    Traceback (most recent call last):
        ...
    ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)

Test for passing no parameter

    >>> matrix_mul()
    Traceback (most recent call last):
        ...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

Test for passing m_a only

    >>> matrix_mul([[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'
    
Test for passing m_a as string

    >>> matrix_mul("This is not right ;")
    Traceback (most recent call last):
    ...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

Test for floating points in m_a

    >>> print(matrix_mul([[1.5, 2.2], [3.44, 4.22]], [[1.44, 2.55], [3.11, 4.75]])) # Test for floating points in m_a and m_b
    [[ 9.002  14.275 ]
     [18.0778 28.817 ]]
    >>> print(matrix_mul([[1.23, 2.12]], [[3.65, 4.46], [5.12, 6.90]]))
    [[15.3439 20.1138]]

Test for passing string as m_a and m_b

    >>> print(matrix_mul("not a list", "also not a list"))
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

Test for passing None to both m_a and m_b

    >>> print(matrix_mul(None, None))
    Traceback (most recent call last):
    TypeError: Object arrays are not currently supported

