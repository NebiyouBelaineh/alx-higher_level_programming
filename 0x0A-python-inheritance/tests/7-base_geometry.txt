The ```7-base_geometry``` Module
===================

    >>> BaseGeometry  = __import__('7-base_geometry').BaseGeometry

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    TypeError: name must be an integer
    
    >>> bg.integer_validator("age", 0) # Passing string with 0
    Traceback (most recent call last):
    ValueError: age must be greater than 0


    >>> bg.integer_validator("distance", -4) # Passing string with negative number
    Traceback (most recent call last):
    ValueError: distance must be greater than 0


    >>> bg.integer_validator("distance", 5.4) # Passing string with float number
    Traceback (most recent call last):
    TypeError: distance must be an integer


    >>> bg.area() # Checking area() with 1 parameter(self)
    Traceback (most recent call last):
    Exception: area() is not implemented

    >>> bg.area(2) # Checking area() method with additional parameter
    Traceback (most recent call last):
    TypeError: BaseGeometry.area() takes 1 positional argument but 2 were given
    
    >>> bg.integer_validator("Input_list", [1,2,3,4,5]) # Passing string with list to integer_validator
    Traceback (most recent call last):
    TypeError: Input_list must be an integer
    
    >>> bg.integer_validator("Input_string", "my_dict says Hello World") # Passing string with string to integer_validator
    Traceback (most recent call last):
    TypeError: Input_string must be an integer


    >>> bg.integer_validator("Input_tuple", ("Great","Scott")) # Passing string with tuple to integer_validator
    Traceback (most recent call last):
    TypeError: Input_tuple must be an integer

    >>> bg.integer_validator() # Passing empty parameters to integer_validator
    Traceback (most recent call last):
    TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'


    >>> m = __import__("7-base_geometry").__doc__ # Checking for module docstring
    >>> len(m) > 1
    True

    >>> c = __import__("7-base_geometry").BaseGeometry.__doc__ # Checking for class docstring
    >>> len(c) > 1
    True
