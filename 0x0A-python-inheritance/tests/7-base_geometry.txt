The ```7-base_geometry``` Module
===================

    >>> BaseGeometry  = __import__('7-base_geometry').BaseGeometry

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    TypeError: name must be an integer
    
Passing string with 0
    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ValueError: age must be greater than 0

Passing string with negative number
    >>> bg.integer_validator("distance", -4)
    Traceback (most recent call last):
    ValueError: distance must be greater than 0

Passing string with float number
    >>> bg.integer_validator("distance", 5.4)
    Traceback (most recent call last):
    TypeError: distance must be an integer

Checking area() with 1 parameter(self)
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

Checking area() method with additional parameter
    >>> bg.area(2)
    Traceback (most recent call last):
    TypeError: BaseGeometry.area() takes 1 positional argument but 2 were given
    
Passing string with list to integer_validator
    >>> bg.integer_validator("Input_list", [1,2,3,4,5])
    Traceback (most recent call last):
    TypeError: Input_list must be an integer
    
Passing string with string to integer_validator
    >>> bg.integer_validator("Input_string", "my_dict says Hello World")
    Traceback (most recent call last):
    TypeError: Input_string must be an integer

Passing string with tuple to integer_validator

    >>> bg.integer_validator("Input_tuple", ("Great","Scott"))
    Traceback (most recent call last):
    TypeError: Input_tuple must be an integer

Passing empty parameters to integer_validator

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'
